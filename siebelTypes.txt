/***************************************************************************
  Type declarations for the Siebel Script And Web Template Editor extension
  This file is automatically generated from the extension if it does not
  exist in the Visual Studio Code Workspace folder
****************************************************************************/

//Siebel eScript specific objects
declare function TheApplication(): TheApplication;
declare function EAICreateIntMsgOut(propSet: PropertySet): EAIMsg;
declare const Clib: Clib;
declare const SElib: SElib;

//Siebel eScript specific conversion methods
declare function ToBoolean(value: any): boolean;
declare function ToBuffer(value: any): any;
declare function ToBytes(value: any): any;
declare function ToInt32(value: any): number;
declare function ToInteger(value: any): number;
declare function ToNumber(value: any): number;
declare function ToObject(value: any): any;
declare function ToString(value: any): string;
declare function ToUint16(value: any): number;
declare function ToUint32(value: any): number;

//Siebel eScript specific constants
declare const ContinueOperation = 1;
declare const CancelOperation = 2;
declare const ForwardBackward = 256;
declare const ForwardOnly = 257;
declare const NewBefore = 0;
declare const NewAfter = 1;
declare const NewBeforeCopy = 2;
declare const NewAfterCopy = 3;
declare const SalesRepView = 0;
declare const ManagerView = 1;
declare const PersonalView = 2;
declare const AllView = 3;
declare const OrganizationView = 5;
declare const GroupView = 7;
declare const CatalogView = 8;
declare const SubOrganizationView = 9;
declare const CDECL: Convention;
declare const STDCALL: Convention;
declare const PASCAL: Convention;

//Interfaces for the Siebel eScript specific objects
interface TheApplication {
  ActiveViewName(): string;
  ActiveBusObject(): BusObject;
  CurrencyCode(): string;
  GetBusObject(busObjName: string): BusObject;
  GetProfileAttr(profAttrName: string): string;
  GetService(svcName: string): Service;
  GetSharedGlobal(shGlobalName: string): string;
  GotoView(viewName: string, busObjName: string): void;
  InvokeMethod(
    methodName: string,
    ...args: string[]
  ): any;
  LoginId(): string;
  LoginName(): string;
  LookupMessage(category: string, key: string, ...args: string[]): string;
  NewPropertySet(): PropertySet;
  PositionId(): string;
  PositionName(): string;
  RaiseError(key: string, ...subVals: string[]): void;
  RaiseErrorText(message: string): void;
  SetPositionId(positionId: string): boolean;
  SetPositionName(positionName: string): boolean;
  SetProfileAttr(profAttrName: string, profAttrValue: string): void;
  SetSharedGlobal(shGlobalName: string, shGlobalValue: string): void;
  Trace(message: string): void;
  TraceOn(fName: string, type: string, selection: string): void;
  TraceOff(): void;
}

interface BusObject {
  GetBusComp(busCompName: string): BusComp;
  Name(): string;
}

interface BusComp {
  ActivateField(fieldName: string): void;
  ActivateMultipleFields(fields: PropertySet): void;
  Associate(position: number): void;
  BusObject(): BusObject;
  ClearToQuery(): void;
  CountRecords(): number;
  DeactivateFields(): void;
  DeleteRecord(): void;
  ExecuteQuery(cursorMode?: number): void;
  ExecuteQuery2(cursorMode: number, ignoreMaxCursorSize: boolean): void;
  FirstRecord(): boolean;
  FirstSelected(): boolean;
  GetAssocBusComp(): BusComp;
  GetFieldValue(fieldName: string): string;
  GetFormattedFieldValue(fieldName: string): string;
  GetMultipleFieldValues(fields: PropertySet): PropertySet;
  GetMVGBusComp(fieldName: string): BusComp;
  GetNamedSearch(searchName: string): string;
  GetPicklistBusComp(fieldName: string): BusComp;
  GetSearchExpr(): string;
  GetSearchSpec(fieldName: string): string;
  GetUserProp(propName: string): string;
  GetUserProperty(propName: string): string;
  GetViewMode(): number;
  InvokeMethod(
    methodName: string,
    inPropSet?: PropertySet,
    outPropSet?: PropertySet
  ): void;
  LastRecord(): boolean;
  Name(): string;
  NewRecord(cursorMode: number): void;
  NextRecord(): boolean;
  NextSelected(): boolean;
  ParentBusComp(): BusComp;
  Pick(): void;
  PreviousRecord(): boolean;
  RefineQuery(): void;
  SearchExpr(expr: string): string;
  SetFieldValue(fieldName: string, fieldValue: string | number): void;
  SetFormattedFieldValue(fieldName: string, fieldValue: string | number): void;
  SetMultipleFieldValues(fields: PropertySet): void;
  SetNamedSearch(searchName: string, searchValue: string): void;
  SetSearchExpr(searchExpr: string): void;
  SetSearchSpec(fieldName: string, fieldValue: string): void;
  SetSortSpec(sortSpec: string): void;
  SetUserProperty(propName: string, propValue: string): void;
  SetViewMode(viewMode: number): void;
  UndoRecord(): void;
  WriteRecord(): void;
}

interface Service {
  [x: string]: any;
  GetFirstProperty(): string;
  GetNextProperty(): string;
  GetProperty(propName: string): string;
  InvokeMethod(
    methodName: string,
    inPropSet: PropertySet,
    outPropSet: PropertySet
  ): void;
  Name(): string;
  PropertyExists(propName: string): boolean;
  RemoveProperty(propName: string): void;
  SetProperty(propName: string, propValue: string): void;
}

interface PropertySet {
  AddChild(propSet: PropertySet): number;
  Copy(): PropertySet;
  GetChild(index: number): PropertySet;
  GetChildCount(): number;
  GetFirstProperty(): string;
  GetNextProperty(): string;
  GetProperty(propName: string): string;
  GetPropertyCount(): number;
  GetType(): string;
  GetValue(): string;
  InsertChildAt(propSet: PropertySet, index: number): void;
  PropertyExists(propName: string): boolean;
  RemoveChild(index: number): void;
  RemoveProperty(propName: string): void;
  Reset(): void;
  SetProperty(propName: string, propValue: string): void;
  SetType(typeVal: string): void;
  SetValue(value: string): void;
}

interface WebApplet {
  BusComp(): BusComp;
  BusObject(): BusObject;
  InvokeMethod(
    methodName: string,
    inPropSet: PropertySet,
    outPropSet: PropertySet
  ): void;
  Name(): string;
}

interface Clib {
  fread(dstVar: any, varDescription: any, fp: FilePointer): number;
  fopen(fileName: string, mode: string): FilePointer;
  fputs(str: string, fp: FilePointer): number;
  fwrite(sourceVar: any, varDescription: any, fp: FilePointer): number;
  rename(oldName: string, newName: string): number;
  getenv(varname: string): string;
  putenv(envName: string, envValue: string): number;
  rand(): number;
  srand(seed: number): void;
  system(command: string): number;
}

interface FilePointer {}

interface SElib {
  dynamicLink(libName: string, procName: string, convention?: Convention, ...args: (string | number)[]): number;
}

interface Convention {}

interface EAIMsg {
  CreateIntObj(intObjName: string): IntObj;
}

interface IntObj {
  CreatePrimaryIntComp(intCompName: string): PrIntComp;
  NewInstance(): void;
}

interface PrIntComp extends IntComp {
  CreateIntComp(intCompName: string): IntComp;
}

interface IntComp {
  NewRecord(): void;
  SetFieldValue(fieldName: string, fieldValue: string): void;
  GetFieldValue(fieldName: string): string;
}