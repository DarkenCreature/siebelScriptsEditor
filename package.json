{
	"name": "siebelscriptandwebtempeditor",
	"displayName": "Siebel Script And Web Template Editor",
	"description": "Enables the editing of Siebel object server scripts and web templates in VSCode and updating them in Siebel using the Siebel REST API",
	"version": "1.4.0",
	"publisher": "endoIT",
	"icon": "media/icon.png",
	"engines": {
		"vscode": "^1.73.0"
	},
	"categories": [
		"Other",
		"Snippets"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/endoit/siebelScriptsEditor"
	},
	"activationEvents": [
		"onCommand:siebelscriptandwebtempeditor.pullScript",
		"onCommand:siebelscriptandwebtempeditor.pushScript",
		"onView:extensionView"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "siebelScriptAndWebTempEditor",
					"title": "Siebel Script And Web Template Editor",
					"icon": "./media/icon.png"
				}
			]
		},
		"views": {
			"siebelScriptAndWebTempEditor": [
				{
					"type": "webview",
					"id": "extensionView",
					"name": "Select datasource"
				},
				{
					"id": "service",
					"name": "Business Services"
				},
				{
					"id": "buscomp",
					"name": "Business Components"
				},
				{
					"id": "applet",
					"name": "Applets"
				},
				{
					"id": "application",
					"name": "Applications"
				},
				{
					"id": "webtemp",
					"name": "Web Templates"
				}
			]
		},
		"commands": [
			{
				"command": "siebelscriptandwebtempeditor.pullScript",
				"title": "Get script/web template from Siebel",
				"icon": {
					"light": "./media/arrowdown_light.png",
					"dark": "./media/arrowdown_dark.png"
				},
				"when": "workspaceFolderCount > 0 && ((resourceDirname =~ /service|buscomp|applet|application/ && (resourceExtname == .js || resourceExtname == .ts)) || (resourceDirname =~ /webtemp/ && resourceExtname == .html)) && !isInDiffEditor"
			},
			{
				"command": "siebelscriptandwebtempeditor.pushScript",
				"title": "Push script/web template to Siebel",
				"icon": {
					"light": "./media/arrowup_light.png",
					"dark": "./media/arrowup_dark.png"
				},
				"when": "workspaceFolderCount > 0 && ((resourceDirname =~ /service|buscomp|applet|application/ && (resourceExtname == .js || resourceExtname == .ts)) || (resourceDirname =~ /webtemp/ && resourceExtname == .html)) && !isInDiffEditor"
			}
		],
		"menus": {
			"editor/title": [
				{
					"command": "siebelscriptandwebtempeditor.pullScript",
					"group": "navigation",
					"when": "workspaceFolderCount > 0 && ((resourceDirname =~ /service|buscomp|applet|application/ && (resourceExtname == .js || resourceExtname == .ts)) || (resourceDirname =~ /webtemp/ && resourceExtname == .html)) && !isInDiffEditor"
				},
				{
					"command": "siebelscriptandwebtempeditor.pushScript",
					"group": "navigation",
					"when": "workspaceFolderCount > 0 && ((resourceDirname =~ /service|buscomp|applet|application/ && (resourceExtname == .js || resourceExtname == .ts)) || (resourceDirname =~ /webtemp/ && resourceExtname == .html)) && !isInDiffEditor"
				}
			]
		},
		"configuration": {
			"title": "Siebel Script And Web Template Editor",
			"properties": {
				"siebelScriptAndWebTempEditor.connections": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"markdownDescription": "Siebel REST API connections and their workspaces as key-value pairs. For the __Item__ column, give the connection parameteres for a Siebel REST API using the following format: CONNECTIONNAME/USERNAME/PASSWORD@SIEBELRESTENDPOINT, e.g.:  \n`DEVENV/SIEBEL/SECRET@https://devclient.devdomain.com/siebel/v1.0`.  \nFor the __Value__ column, give the names of the workspaces to use for that connection as a comma separated list, e.g.:  \n`MAIN,custom_dev_ws,other_dev_ws`.  \nIf no workspaces are given for a connection, then the extension will try to get the list of workspaces through the REST API (only the ones created by the given user and having status either Checkpointed or Edit-In-Progress). For this feature to work, the 'Base Workspace' integration object has to be imported into Siebel and merged into the MAIN workspace. This integration object can be found in the repository of the extension, under the name [`BaseWorkspaceIOB.sif`](https://github.com/endoit/siebelScriptsEditor/blob/main/BaseWorkspaceIOB.sif). See the [documentation](https://github.com/endoit/siebelScriptsEditor/wiki#213-getting-workspace-data-from-rest) for more information."
				},
				"siebelScriptAndWebTempEditor.defaultConnection": {
					"type": "string",
					"markdownDescription": "Use the 'Set as default' button in the extension to change it. Name of the default REST connection and workspace to use, e.g. `DEVENV:custom_dev_ws`"
				},
				"siebelScriptAndWebTempEditor.defaultScriptFetching": {
					"type": "string",
					"enum": [
						"None - always ask",
						"Only method names",
						"All scripts"
					],
					"default": "None - always ask",
					"markdownDescription": "Default method for fetching server scripts in the tree views when clicking on a Siebel object:  \n - None - always ask: always asks how to fetch.  \n - Only method names: fetches only the method names of the Siebel object.  \n - All scripts: always downloads all scripts of the Siebel object. __WARNING__: this overwrites files which are already downloaded!"
				},
				"siebelScriptAndWebTempEditor.singleFileAutoDownload": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "If you set this to true, scripts and web templates will be downloaded when clicking on one, without asking for permission. __WARNING__: this overwrites files which are already downloaded!"
				},
				"siebelScriptAndWebTempEditor.localFileExtension": {
					"type": "string",
					"enum": [
						".js",
						".ts"
					],
					"default": ".js",
					"markdownDescription": "The default file extension for the downloaded server scripts. If you use type definitons in eScript, it is recommended to save the files as .ts."
				}
			}
		},
		"snippets": [
			{
				"language": "javascript",
				"path": "./snippets.json"
			}
		]
	},
	"scripts": {
		"test": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. --extensionTestsPath=dist/web/test/suite/index.js",
		"pretest": "npm run compile-web",
		"vscode:prepublish": "npm run package-web",
		"compile-web": "webpack",
		"watch-web": "webpack --watch",
		"package-web": "webpack --mode production --devtool hidden-source-map",
		"lint": "eslint src --ext ts",
		"run-in-browser": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. ."
	},
	"dependencies": {
		"axios": "^1.6.2"
	},
	"devDependencies": {
		"@types/glob": "^7.1.4",
		"@types/mocha": "^10.0.1",
		"@types/node": "^14.18.34",
		"@types/vscode": "^1.73.0",
		"@types/webpack-env": "^1.18.0",
		"@typescript-eslint/eslint-plugin": "^5.45.0",
		"@typescript-eslint/parser": "^5.45.0",
		"@vscode/test-electron": "^1.6.2",
		"@vscode/test-web": "^0.0.33",
		"assert": "^2.0.0",
		"eslint": "^8.28.0",
		"glob": "^7.1.7",
		"mocha": "^10.1.0",
		"process": "^0.11.10",
		"ts-loader": "^9.4.1",
		"typescript": "^4.9.3",
		"webpack": "^5.75.0",
		"webpack-cli": "^5.1.4"
	}
}